package com.design.builder;

/**
 * Builder模式<br/>
 * 建造者模式。<br/>
 * 要什么顺序就按什么顺序生成出模型。<br/>
 * <p>
 * 构造函数参数列表过长，代码可读性和易用性会变差。可以用set方法解决。<br/>
 * 1、但是如果是必填项很长，用构造函数的话参数列表过长，用set的话又缺少校验（未初始化的话，无法显示察觉）<br/>
 * 2、如果配置项之间有一定的依赖关系/约束条件，依赖关系和约束条件的校验不好书写<br/>
 * 3、希望对象在创建好之后，就不能再修改内部的属性值。要实现这个功能，我们就不能在ResourcePoolConfig 类中暴露 set() 方法。<br/>
 * -------------------------------------------------------------------------<br/>
 * 以上缺点都可以通过建造者模式解决。<br/>
 * 把校验逻辑放置到 Builder 类中，先创建建造者，并且通过 set() 方法设置建造者的变量值，然后在使用 build() 方法真正创建对象之前，做集中的校验，校验通过之后才会创建对象。<br/>
 * 工厂模式&建造者模式<br/>
 * 工厂模式：要什么对象我给你什么对象<br/>
 * 建造者模式：给你，你制定装配顺序和要求的对象。你自己定义装配内容和装配顺序。<br/>
 * -------------------------------------------------------------------------<br/>
 * - ResourcePoolConfig是设计模式代码示例<br/>
 * - ConstructorArg是作业<br/>
 */
public class Main {

    public static void main(String[] args) {

    }
}
